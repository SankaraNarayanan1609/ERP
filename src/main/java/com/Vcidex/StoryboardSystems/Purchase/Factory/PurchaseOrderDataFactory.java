// src/main/java/com/Vcidex/StoryboardSystems/Purchase/Factory/PurchaseOrderDataFactory.java
package com.Vcidex.StoryboardSystems.Purchase.Factory;

import com.Vcidex.StoryboardSystems.Purchase.POJO.LineItem;
import com.Vcidex.StoryboardSystems.Purchase.POJO.PurchaseOrderData;
import com.Vcidex.StoryboardSystems.Purchase.POJO.Product;
import com.Vcidex.StoryboardSystems.Purchase.POJO.Vendor;
import com.Vcidex.StoryboardSystems.Purchase.POJO.Employee;
import com.github.javafaker.Faker;
import org.testng.SkipException;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class PurchaseOrderDataFactory {
    private final MasterDataProvider masters;
    private final Faker faker;

    public PurchaseOrderDataFactory(MasterDataProvider masters) {
        this.masters = masters;
        // seed for repeatable tests
        this.faker   = new Faker(new Random(12345));
    }

    public PurchaseOrderData create(boolean renewalRequired) {
        // ── 1) Header data ─────────────────────────────────────────────────────────
        String branchName = pickRandom(masters.getBranches(), "Branch");

        Vendor vendor = pickRandom(masters.getVendors(), "Vendor");
        String vendorName    = vendor.getVendor_companyname();
        String billTo        = vendor.getAddress1();

        LocalDate poDate       = LocalDate.now();
        LocalDate expectedDate = poDate.plusDays(faker.number().numberBetween(1, 30));

        String shipTo = faker.address().fullAddress();

        Employee employee = pickRandom(masters.getEmployees(), "Employee");
        String requestedBy             = employee.getUserName();
        //String requestorContactDetails = employee.getContact();

        String deliveryTerms = faker.number().numberBetween(1, 60) + " days";
        String paymentTerms  = faker.number().numberBetween(15, 90) + " days";
        String dispatchMode  = faker.options().option("Air", "Road", "Sea");

        String currencyCode = pickRandom(masters.getCurrencies(), "Currency");
        BigDecimal exchangeRate = masters.getCurrencyRates()
                .getOrDefault(currencyCode, BigDecimal.ONE);

        String coverNote = faker.lorem().sentence(8);

        LocalDate renewalDate = null;
        String frequency      = null;
        if (renewalRequired) {
            renewalDate = poDate.plusMonths(faker.number().numberBetween(1, 12));
            frequency   = faker.options()
                    .option("Monthly","Quarterly","Half Yearly","Yearly");
        }

        // ── 2) Line items ─────────────────────────────────────────────────────────
        List<Product> products = masters.getProducts();
        int lineCount = faker.number().numberBetween(1, 5);
        List<LineItem> items = new ArrayList<>();
        for (int i = 0; i < lineCount; i++) {
            Product p = pickRandom(products, "Product");
            LineItem li = new LineItem();
            li.setProductGroup(p.getProductGroupName());
            li.setProductCode(p.getProductGroupCode());
            li.setProductName(p.getProductName());
            li.setDescription(p.getProductDesc());
            li.setQuantity(faker.number().numberBetween(1, 100));
            li.setPrice(p.getCostPriceDecimal());

            BigDecimal pct = BigDecimal.valueOf(faker.number().randomDouble(2, 0, 20));
            BigDecimal amt = p.getCostPriceDecimal()
                    .multiply(pct)
                    .divide(BigDecimal.valueOf(100));
            li.setDiscountPct(pct);
            li.setDiscountAmt(amt);

            // **FIX BELOW**
            String taxPrefix = pickRandom(masters.getTaxCodes(), "TaxCode");
            li.setTaxPrefix(taxPrefix);
            BigDecimal pctVal = masters.getTaxPercentage().getOrDefault(taxPrefix, BigDecimal.ZERO);
            li.setTaxRate(pctVal.divide(BigDecimal.valueOf(100)));

            li.computeTotal();
            items.add(li);
        }

        // ── 3) Build the POJO via builder ─────────────────────────────────────────
        PurchaseOrderData data = PurchaseOrderData.builder()
                .branchName(branchName)
                .poRefNo("")  // auto-generated by system
                .poDate(poDate)
                .expectedDate(expectedDate)
                .vendorName(vendorName)
                //.vendorDetails(vendorDetails)
                .billTo(billTo)
                .shipTo(shipTo)
                .requestedBy(requestedBy)
                //.requestorContactDetails(requestorContactDetails)
                .deliveryTerms(deliveryTerms)
                .paymentTerms(paymentTerms)
                .dispatchMode(dispatchMode)
                .currency(currencyCode)
                .exchangeRate(exchangeRate)
                .coverNote(coverNote)
                .renewal(renewalRequired)
                .renewalDate(renewalDate)
                .frequency(frequency)
                .lineItems(items)
                .addOnCharges(BigDecimal.valueOf(
                        faker.number().randomDouble(2, 0, 500)
                ))
                .additionalDiscount(BigDecimal.valueOf(
                        faker.number().randomDouble(2, 0, 200)
                ))
                .freightCharges(BigDecimal.valueOf(
                        faker.number().randomDouble(2, 0, 300)
                ))
                .additionalTax(pickRandom(
                        masters.getTaxCodes(), "TaxCode"
                ))
                .termsAndConditions(pickRandom(
                        masters.getTermsAndConditions(), "TermsAndConditions"
                ))
                .termsEditorText(faker.lorem().paragraph())
                .build();

        // ── 4) Compute derived totals ─────────────────────────────────────────────
        data.computeNetAmount();
        data.computeGrandTotal();

        return data;
    }

    /**
     * If the list is null or empty, we skip the entire test early.
     */
    private <T> T pickRandom(List<T> list, String dataName) {
        if (list == null || list.isEmpty()) {
            throw new SkipException(
                    "⏭ Skipping test: no master-data available for `" + dataName + "`"
            );
        }
        return list.get(faker.random().nextInt(list.size()));
    }
}